package com.hostel.hostelmanagementsystem.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

@Getter
@Setter
@Entity
@Table(name = "Notification")
public class Notification {

    /**
     * Unique identifier for the notification. Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "notification_id")
    private Long notificationId;

    /**
     * Full name of the customer related to this notification.
     */
    @Column(name = "customer_full_name")
    private String customerFullName;

    /**
     * Identifier of the related booking, if applicable.
     */
    @Column(name = "booking_id")
    private Integer bookingId;

    /**
     * Room number associated with the booking or notification context.
     */
    @Column(name = "room_number")
    private String roomNumber;

    /**
     * Bed number associated with the booking or notification context.
     */
    @Column(name = "bed_number")
    private String bedNumber;

    /**
     * Check-in date associated with the booking.
     */
    @Column(name = "check_in_date")
    private LocalDate checkInDate;

    /**
     * Check-out date associated with the booking.
     */
    @Column(name = "check_out_date")
    private LocalDate checkOutDate;

    /**
     * Title of the notification.
     */
    @Column(name = "title")
    private String title;

    /**
     * Content/message body of the notification.
     */
    @Column(name = "message", nullable = false, length = 255)
    private String message;

    /**
     * Flag indicating whether the notification has been read.
     * Defaults to false.
     */
    @Column(name = "is_read", nullable = false)
    private Boolean isRead = false;

    /**
     * Total price associated with the booking or context of the notification.
     */
    @Column(name = "total_price")
    private BigDecimal totalPrice;

    /**
     * Timestamp when the notification was created.
     * Automatically set to the current time.
     */
    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    public Notification() {
    }

    public Notification(String customerFullName, Integer bookingId, String message, String title, String roomNumber, String bedNumber, LocalDate checkInDate, LocalDate checkOutDate,BigDecimal totalPrice) {
        this.customerFullName = customerFullName;
        this.bookingId = bookingId;
        this.title = title;
        this.message = message;
        this.isRead = false;
        this.createdAt = LocalDateTime.now();
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
        this.roomNumber = roomNumber;
        this.bedNumber = bedNumber;
        this.totalPrice = totalPrice;
    }

}
